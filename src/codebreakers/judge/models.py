from django.db import models
from django.contrib.auth.models import User
from django.conf import settings
# Create your models here.

class Contest(models.Model):
    name = models.CharField(max_length=200)
    starts_on = models.DateField()
    ends_on = models.DateField()

    def __unicode__(self):
        return self.name

class Problem(models.Model):
    contest = models.ForeignKey(Contest)
    name = models.CharField(max_length=200)
    problem_statement = models.TextField()
    input_specs = models.TextField()
    output_requirements = models.TextField()
    sample_input = models.TextField()
    sample_output = models.TextField()
    test_input = models.TextField()
    test_output = models.TextField()
    points = models.IntegerField(default=0)
    soln_by_problem_setter = models.TextField()
    use_soln_and_update_test_op = models.BooleanField()

    def __unicode__(self):
        return self.name

class Language(models.Model):
    lang_id = models.IntegerField()
    lang_name = models.CharField(max_length=100)
    
    def __unicode__(self):
        return self.lang_name

class Submission(models.Model):
    problem = models.ForeignKey(Problem)
    user = models.ForeignKey(User)
    source_code = models.TextField(null=True, blank=True)
    solution_output = models.TextField(null=True, blank=True)
    execution_result = models.CharField(max_length=100, default='', 
        null=True, blank=True)
    time_taken = models.CharField(max_length=20)
    memory = models.CharField(max_length=20)
    submitted_on = models.DateTimeField(auto_now_add=True)
    points = models.IntegerField(default=0)
    language = models.ForeignKey(Language)
    is_correct = models.BooleanField(default=False)

    display_in_solutions = models.BooleanField(default=False)

    def __unicode__(self):
        return '%s - %s' % (self.problem, self.user)

    def execute(self):
        """
        Execute the code on IdeOne and get the
        results, including the  output so generated. 
        """
        
        from ideone import Ideone
        client = Ideone(settings.IDEONE_USERNAME, settings.IDEONE_PASSWORD)

        submission = client.create_submission(self.source_code, 
            language_name=self.language.lang_name, 
            language_id=self.language.lang_id,
            std_input=self.problem.test_input,
            run=True, private=True)

        submission = client.submission_details(submission['link'])

        self.execution_result = submission['error']        
        self.solution_output = submission['output']
        self.memory = submission['memory']
        self.time_taken = submission['time']

        self.save()
        self.evaluate_solution()

    def outputs_are_same(self):
        """ 
        Compare the ouptut generated by the users code 
        with the output generated by our program. 
        """

        expected_output = self.problem.test_output.split('\n')
        obtained_output = self.solution_output.split('\n')
        
        if len(expected_output) != len(obtained_output):
            return False
        for expected, obtained in zip(expected_output, obtained_output):
            if expected.strip() != obtained.strip():
                return False
        return True

    def evaluate_solution(self):

        # TODO: Come up with a different scoring system 
        # later on. Taking number of submissions, memory 
        # and time into account.
        
        if self.outputs_are_same():
            self.is_correct = True
            self.points = self.problem.points
        else:
            self.is_correct = False
  
        self.save()
